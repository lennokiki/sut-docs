(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{212:function(e,t,s){"use strict";s.r(t);var r=s(28),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type"}},[e._v("#")]),e._v(" Type")]),e._v(" "),s("h2",{attrs:{id:"typeisequal-obj1-obj2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typeisequal-obj1-obj2"}},[e._v("#")]),e._v(" typeIsEqual(obj1, obj2)")]),e._v(" "),s("h3",{attrs:{id:"determine-whether-two-objects-have-equal-values"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#determine-whether-two-objects-have-equal-values"}},[e._v("#")]),e._v(" Determine whether two objects have equal values")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const obj1 = { a: '1', b: [1, 2, 3]}\nconst obj2 = { a: '1', b: [1, 2, 3]}\nconst obj3 = { a: '2', b: [1, 2, 3]}\n\n// Output `true`\nconst res1 = typeIsEqual(obj1, obj2)\n\n// Output `false`\nconst res2 = typeIsEqual(obj2, obj3)\n")])])]),s("h2",{attrs:{id:"typeis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typeis"}},[e._v("#")]),e._v(" typeIs"),s("a",{attrs:{href:"target"}})]),e._v(" "),s("h3",{attrs:{id:"judge-target-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#judge-target-type"}},[e._v("#")]),e._v(" Judge target type")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// Determine whether the target is of string type\nconst res = typeIs.isString(target)\n \n// Determine whether the target is a numerical type\nconst res = typeIs.isNumber(target)\n \n// Judge whether the target is a function type\nconst res = typeIs.isFunction(target)\n \n// Determine whether the target is of boolean type\nconst res = typeIs.isBoolean(target)\n \n// Determine whether the target is of object type\nconst res = typeIs.isObject(target)\n \n// Determine whether the target is an array type\nconst res = typeIs.isArray(target)\n \n// Determine whether the target is of regular type\nconst res = typeIs.isRegExp(target)\n \n// Determine whether the target is arguments, that is, the parameter type\nconst res = typeIs.isArguments(target)\n \n// Determine whether the target is a date type\nconst res = typeIs.isDate(target)\n \n// Judge whether the target is symbol type\nconst res = typeIs.isSymbol(target)\n \n// Determine whether the target is the wrong type\nconst res = typeIs.isError(target)\n \n// Determine whether the target is promise type\nconst res = typeIs.isPromise(target)\n \n// Determine whether the target is of set type\nconst res = typeIs.isSet(target)\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);