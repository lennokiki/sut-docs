(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{213:function(t,e,r){"use strict";r.r(e);var a=r(28),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"string"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" String")]),t._v(" "),r("h2",{attrs:{id:"stringtrim-string-type"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#stringtrim-string-type"}},[t._v("#")]),t._v(" stringTrim(string[, type])")]),t._v(" "),r("h3",{attrs:{id:"filter-spaces-in-the-specified-string"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#filter-spaces-in-the-specified-string"}},[t._v("#")]),t._v(" Filter spaces in the specified string")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("const str = ' abc  dd ef g '\n\n// Filter all spaces by default, output `abcddefg`\nconst res1 = stringTrim(str) \n\n// Filter start space, output `abc  dd ef g `\nconst res2 = stringTrim(str, 'left')\n\n// Filter end space, output ` abc  dd ef g`\nconst res3 = stringTrim(str, 'right')\n\n// Filter start and end spaces, output `abc  dd ef g`\nconst res4 = stringTrim(str, 'around')\n\n// Filter the space between contents, output ` abcddefg `\nconst res5 = stringTrim(str, 'middle')\n")])])]),r("h2",{attrs:{id:"stringtranscase-string-type"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#stringtranscase-string-type"}},[t._v("#")]),t._v(" stringTransCase(string, type)")]),t._v(" "),r("h3",{attrs:{id:"convert-case"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#convert-case"}},[t._v("#")]),t._v(" Convert case")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("const str = 'hi, HelLO world'\n\n// Convert all to uppercase, output `HI, HELLO WORLD`\nconst re1 = stringTransCase(str, 'upper')\n\n// Convert all to lowercase, output `hi, hello world`\nconst re2 = stringTransCase(str, 'lower')\n\n// Initial to uppercase, output `Hi, Hello World`\nconst re3 = stringTransCase(str, 'capitalize')\n")])])]),r("h2",{attrs:{id:"stringcolor-isrgb-boolean"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#stringcolor-isrgb-boolean"}},[t._v("#")]),t._v(" stringColor(isRgb?: boolean)")]),t._v(" "),r("h3",{attrs:{id:"generate-the-color-value-randomly-the-hexadecimal-color-value-is-generated-by-default-rgb-color-value-is-generated-when-true-is-passed-as-the-input-parameter"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#generate-the-color-value-randomly-the-hexadecimal-color-value-is-generated-by-default-rgb-color-value-is-generated-when-true-is-passed-as-the-input-parameter"}},[t._v("#")]),t._v(" Generate the color value randomly. The hexadecimal color value is generated by default. RGB color value is generated when 'true' is passed as the input parameter")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("// Generate hexadecimal color values such as `#0a0a0a`\nconst color1 = stringColor()\n\n// Generate RGB color values as follows `RGB(2,23,111)`\nconst color2 = stringColor(true)\n")])])]),r("h2",{attrs:{id:"stringcolor16torgb-string"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#stringcolor16torgb-string"}},[t._v("#")]),t._v(" stringColor16ToRgb(string)")]),t._v(" "),r("h3",{attrs:{id:"convert-valid-hexadecimal-color-values-to-rgb-format"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#convert-valid-hexadecimal-color-values-to-rgb-format"}},[t._v("#")]),t._v(" Convert valid hexadecimal color values to RGB format")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("// Output `RGB(0,0,0)`\nconst color1 = stringColor16ToRgb('#000')\n\n// Output `RGB(234,239,51)`\nconst color2 = stringColor16ToRgb('#eaef33')\n\n// Output `RGB(234,239,51)`\nconst color2 = stringColor16ToRgb('#EAEF33')\n")])])]),r("h2",{attrs:{id:"stringcolorrgbto16-string"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#stringcolorrgbto16-string"}},[t._v("#")]),t._v(" stringColorRgbTo16(string)")]),t._v(" "),r("h3",{attrs:{id:"convert-valid-rgb-color-values-to-hexadecimal-color-value-format"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#convert-valid-rgb-color-values-to-hexadecimal-color-value-format"}},[t._v("#")]),t._v(" Convert valid RGB color values to hexadecimal color value format")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("// Output `#000000`\nconst color1 = stringColorRgbTo16('rgb(0,0,0)')\n\n// Output `#eaef33`\nconst color2 = stringColorRgbTo16('RGB(234,239,51)')\n")])])]),r("h2",{attrs:{id:"stringnumtoletter-index-type"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#stringnumtoletter-index-type"}},[t._v("#")]),t._v(" stringNumToLetter(index[, type])")]),t._v(" "),r("h3",{attrs:{id:"convert-numbers-to-alphabetic-typesetting-similar-to-the-automatic-header-of-abcd-z-in-excel-which-is-converted-to-uppercase-by-default"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#convert-numbers-to-alphabetic-typesetting-similar-to-the-automatic-header-of-abcd-z-in-excel-which-is-converted-to-uppercase-by-default"}},[t._v("#")]),t._v(" Convert numbers to alphabetic typesetting, similar to the automatic header of ABCD.. Z in Excel, which is converted to uppercase by default")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("// Output `A`\nconst letter1 = stringNumToLetter(0)\n\n// Output `z`\nconst letter2 = stringNumToLetter(25, 'lower')\n\n// Output `aa`\nconst letter2 = stringNumToLetter(26, 'lower')\n\n// Output `ZA`\nconst letter3 = stringNumToLetter(26 * 26)\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);