(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{206:function(t,r,s){"use strict";s.r(r);var a=s(28),n=Object(a.a)({},(function(){var t=this,r=t.$createElement,s=t._self._c||r;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[t._v("#")]),t._v(" 字符串")]),t._v(" "),s("h2",{attrs:{id:"stringtrim-string-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stringtrim-string-type"}},[t._v("#")]),t._v(" stringTrim(string[, type])")]),t._v(" "),s("h3",{attrs:{id:"过滤指定字符串内的空格"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#过滤指定字符串内的空格"}},[t._v("#")]),t._v(" 过滤指定字符串内的空格")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("const str = ' abc  dd ef g '\n\n// 默认过滤全部空格，输出`abcddefg`\nconst res1 = stringTrim(str) \n\n// 过滤起始空格，输出`abc  dd ef g `\nconst res2 = stringTrim(str, 'left')\n\n// 过滤结尾空格，输出` abc  dd ef g`\nconst res3 = stringTrim(str, 'right')\n\n// 过滤起始和结尾空格，输出`abc  dd ef g`\nconst res4 = stringTrim(str, 'around')\n\n// 过滤内容中间空格，输出` abcddefg `\nconst res5 = stringTrim(str, 'middle')\n")])])]),s("h2",{attrs:{id:"stringtranscase-string-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stringtranscase-string-type"}},[t._v("#")]),t._v(" stringTransCase(string, type)")]),t._v(" "),s("h3",{attrs:{id:"转换大小写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#转换大小写"}},[t._v("#")]),t._v(" 转换大小写")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("const str = 'hi, HelLO world'\n\n// 全部转换为大写，输出`HI, HELLO WORLD`\nconst re1 = stringTransCase(str, 'upper')\n\n// 全部转换为小写，输出`hi, hello world`\nconst re2 = stringTransCase(str, 'lower')\n\n// 首字母转换为大写，输出`Hi, Hello World`\nconst re3 = stringTransCase(str, 'capitalize')\n")])])]),s("h2",{attrs:{id:"stringcolor-isrgb-boolean"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stringcolor-isrgb-boolean"}},[t._v("#")]),t._v(" stringColor(isRgb?: boolean)")]),t._v(" "),s("h3",{attrs:{id:"随机生成色值，默认生成16进制色值，当传递true为入参时生成rgb色值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#随机生成色值，默认生成16进制色值，当传递true为入参时生成rgb色值"}},[t._v("#")]),t._v(" 随机生成色值，默认生成16进制色值，当传递"),s("code",[t._v("true")]),t._v("为入参时生成rgb色值")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 生成16进制色值如`#0a0a0a`\nconst color1 = stringColor()\n\n// 生成rgb色值如`RGB(2,23,111)`\nconst color2 = stringColor(true)\n")])])]),s("h2",{attrs:{id:"stringcolor16torgb-string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stringcolor16torgb-string"}},[t._v("#")]),t._v(" stringColor16ToRgb(string)")]),t._v(" "),s("h3",{attrs:{id:"将有效的16进制色值转换为rgb格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#将有效的16进制色值转换为rgb格式"}},[t._v("#")]),t._v(" 将有效的16进制色值转换为rgb格式")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 输出`RGB(0,0,0)`\nconst color1 = stringColor16ToRgb('#000')\n\n// 输出`RGB(234,239,51)`\nconst color2 = stringColor16ToRgb('#eaef33')\n\n// 输出`RGB(234,239,51)`\nconst color2 = stringColor16ToRgb('#EAEF33')\n")])])]),s("h2",{attrs:{id:"stringcolorrgbto16-string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stringcolorrgbto16-string"}},[t._v("#")]),t._v(" stringColorRgbTo16(string)")]),t._v(" "),s("h3",{attrs:{id:"将有效的rgb色值转换为16进制色值格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#将有效的rgb色值转换为16进制色值格式"}},[t._v("#")]),t._v(" 将有效的rgb色值转换为16进制色值格式")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 输出`#000000`\nconst color1 = stringColorRgbTo16('rgb(0,0,0)')\n\n// 输出`#eaef33`\nconst color2 = stringColorRgbTo16('RGB(234,239,51)')\n")])])]),s("h2",{attrs:{id:"stringnumtoletter-index-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stringnumtoletter-index-type"}},[t._v("#")]),t._v(" stringNumToLetter(index[, type])")]),t._v(" "),s("h3",{attrs:{id:"将数字转换为字母排版，类似excel当中的abcd-z的自动表头，默认转换为大写字母"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#将数字转换为字母排版，类似excel当中的abcd-z的自动表头，默认转换为大写字母"}},[t._v("#")]),t._v(" 将数字转换为字母排版，类似Excel当中的ABCD..Z的自动表头，默认转换为大写字母")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 输出`A`\nconst letter1 = stringNumToLetter(0)\n\n// 输出`z`\nconst letter2 = stringNumToLetter(25, 'lower')\n\n// 输出`aa`\nconst letter2 = stringNumToLetter(26, 'lower')\n\n// 输出`ZA`\nconst letter3 = stringNumToLetter(26 * 26)\n")])])])])}),[],!1,null,null,null);r.default=n.exports}}]);